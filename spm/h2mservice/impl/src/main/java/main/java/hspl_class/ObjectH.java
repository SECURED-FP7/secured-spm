//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.02.29 at 10:28:31 AM CET 
//


package main.java.hspl_class;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for objectH.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="objectH">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="VoIP_traffic"/>
 *     &lt;enumeration value="P2P_traffic"/>
 *     &lt;enumeration value="T3G4G_traffic"/>
 *     &lt;enumeration value="Internet_traffic"/>
 *     &lt;enumeration value="Intranet_traffic"/>
 *     &lt;enumeration value="DNS_traffic"/>
 *     &lt;enumeration value="resource"/>
 *     &lt;enumeration value="file_scanning"/>
 *     &lt;enumeration value="email_scanning"/>
 *     &lt;enumeration value="antivirus"/>
 *     &lt;enumeration value="basic_prarental_control"/>
 *     &lt;enumeration value="advance_parental_control"/>
 *     &lt;enumeration value="lawful_interception"/>
 *     &lt;enumeration value="IDS_IPS"/>
 *     &lt;enumeration value="DDos_attack_protection"/>
 *     &lt;enumeration value="tacking_techniques"/>
 *     &lt;enumeration value="advertisement"/>
 *     &lt;enumeration value="bandwidth"/>
 *     &lt;enumeration value="security_status"/>
 *     &lt;enumeration value="connection"/>
 *     &lt;enumeration value="AllTraffic"/>
 *     &lt;enumeration value="logging"/>
 *     &lt;enumeration value="malware_detection"/>
 *     &lt;enumeration value="antiPhishing"/>
 *     &lt;enumeration value="anonimity"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "objectH")
@XmlEnum
public enum ObjectH {

    @XmlEnumValue("VoIP_traffic")
    VO_IP_TRAFFIC("VoIP_traffic"),
    @XmlEnumValue("P2P_traffic")
    P_2_P_TRAFFIC("P2P_traffic"),
    @XmlEnumValue("T3G4G_traffic")
    T_3_G_4_G_TRAFFIC("T3G4G_traffic"),
    @XmlEnumValue("Internet_traffic")
    INTERNET_TRAFFIC("Internet_traffic"),
    @XmlEnumValue("Intranet_traffic")
    INTRANET_TRAFFIC("Intranet_traffic"),
    @XmlEnumValue("DNS_traffic")
    DNS_TRAFFIC("DNS_traffic"),
    @XmlEnumValue("resource")
    RESOURCE("resource"),
    @XmlEnumValue("file_scanning")
    FILE_SCANNING("file_scanning"),
    @XmlEnumValue("email_scanning")
    EMAIL_SCANNING("email_scanning"),
    @XmlEnumValue("antivirus")
    ANTIVIRUS("antivirus"),
    @XmlEnumValue("basic_prarental_control")
    BASIC_PRARENTAL_CONTROL("basic_prarental_control"),
    @XmlEnumValue("advance_parental_control")
    ADVANCE_PARENTAL_CONTROL("advance_parental_control"),
    @XmlEnumValue("lawful_interception")
    LAWFUL_INTERCEPTION("lawful_interception"),
    IDS_IPS("IDS_IPS"),
    @XmlEnumValue("DDos_attack_protection")
    D_DOS_ATTACK_PROTECTION("DDos_attack_protection"),
    @XmlEnumValue("tacking_techniques")
    TACKING_TECHNIQUES("tacking_techniques"),
    @XmlEnumValue("advertisement")
    ADVERTISEMENT("advertisement"),
    @XmlEnumValue("bandwidth")
    BANDWIDTH("bandwidth"),
    @XmlEnumValue("security_status")
    SECURITY_STATUS("security_status"),
    @XmlEnumValue("connection")
    CONNECTION("connection"),
    @XmlEnumValue("AllTraffic")
    ALL_TRAFFIC("AllTraffic"),
    @XmlEnumValue("logging")
    LOGGING("logging"),
    @XmlEnumValue("malware_detection")
    MALWARE_DETECTION("malware_detection"),
    @XmlEnumValue("antiPhishing")
    ANTI_PHISHING("antiPhishing"),
    @XmlEnumValue("anonimity")
    ANONIMITY("anonimity");
    private final String value;

    ObjectH(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static ObjectH fromValue(String v) {
        for (ObjectH c: ObjectH.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
